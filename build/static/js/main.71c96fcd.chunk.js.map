{"version":3,"sources":["ModuleStyles/PhoneBook.module.css","redux/contactActions.js","redux/contactOperations.js","redux/contactsSelectors.js","Components/ContactForm.jsx","Components/Filter.jsx","Components/ContactsList.jsx","App.js","redux/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","delContactRequest","delContactsSuccess","delContactsError","doFilter","filter","payload","addContact","name","number","dispatch","contactAction","axios","post","then","data","catch","error","fetchContacts","get","removeContact","id","delete","getContacts","state","contacts","items","getFilterValue","getVisibleContacts","createSelector","contact","toLowerCase","includes","toast","configure","ContactForm","handleChange","e","setState","target","value","handleChangeNum","notifiation","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","handleSubmit","preventDefault","props","find","length","this","className","style","submitForm","onSubmit","details","type","onChange","mask","addContactBtn","Component","mDPT","taskOperation","connect","contactSelector","mapDispatchToProps","handleFilter","taskActions","searchForm","formDescription","searchInput","mDTP","deleteContact","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","contactName","contactDetails","contactPhone","removeButton","onClick","App","onFetchContacts","phonebook","bg","appear","in","unmountOnExit","contactOperation","createReducer","action","info","combineReducers","middlewareSettings","getDefaultMiddleware","store","configureStore","reducer","contactsReducer","middleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71c96fcd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook\":\"PhoneBook_phonebook__2DcGW\",\"details\":\"PhoneBook_details__3ehCp\",\"addContactBtn\":\"PhoneBook_addContactBtn__Mo0pn\",\"submitForm\":\"PhoneBook_submitForm__2xI-m\",\"contactDetails\":\"PhoneBook_contactDetails__2Lcd5\",\"contactName\":\"PhoneBook_contactName__33SH9\",\"removeButton\":\"PhoneBook_removeButton__Do9_U\",\"formDescription\":\"PhoneBook_formDescription__3bOPh\",\"searchForm\":\"PhoneBook_searchForm__aoNcE\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst addContactRequest = createAction('contact/addRequest');\nconst addContactSuccess = createAction('contact/addSuccess');\nconst addContactError = createAction('contact/addError');\n\nconst fetchContactsRequest = createAction('contact/fetchRequest');\nconst fetchContactsSuccess = createAction('contact/fetchSuccess');\nconst fetchContactsError = createAction('contact/fetchError');\n\nconst delContactRequest = createAction('contact/delContRequest');\nconst delContactsSuccess = createAction('contact/delContSuccess');\nconst delContactsError = createAction('contact/delContError');\n\nconst doFilter = createAction('contact/filter', (filter) => ({\n   payload: { filter },\n}));\n\nexport default {\n   addContactRequest,\n   addContactSuccess,\n   addContactError,\n\n   fetchContactsRequest,\n   fetchContactsSuccess,\n   fetchContactsError,\n\n   delContactRequest,\n   delContactsSuccess,\n   delContactsError,\n\n   doFilter,\n};\n","import contactAction from './contactActions';\nimport axios from 'axios';\n\nconst addContact = (name, number) => (dispatch) => {\n   dispatch(contactAction.addContactRequest());\n   axios\n      .post('http://localhost:2000/contacts', {\n         name,\n         number,\n      })\n      .then(({ data }) => {\n         dispatch(contactAction.addContactSuccess(data));\n      })\n      .catch((error) => {\n         dispatch(contactAction.addContactError());\n      });\n};\n\nconst fetchContacts = () => (dispatch) => {\n   dispatch(contactAction.fetchContactsRequest());\n   axios\n      .get('http://localhost:2000/contacts')\n      .then(({ data }) => {\n         dispatch(contactAction.fetchContactsSuccess(data));\n      })\n      .catch((error) => {\n         dispatch(contactAction.fetchContactsError(error));\n      });\n};\nconst removeContact = (id) => (dispatch) => {\n   dispatch(contactAction.delContactRequest());\n   axios\n      .delete(`http://localhost:2000/contacts/${id}`)\n      .then(() => dispatch(contactAction.delContactsSuccess(id)))\n      .then((error) => contactAction.delContactsError(error));\n};\nexport default { addContact, fetchContacts, removeContact };\n","import { createSelector } from '@reduxjs/toolkit';\nconst getContacts = (state) => state.contacts.items;\nconst getFilterValue = (state) => state.contacts.filter;\n\nconst getVisibleContacts = createSelector(\n   [getContacts, getFilterValue],\n   (contacts, filter) => {\n      return contacts.filter((contact) =>\n         contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n   }\n);\n\n\nexport default { getContacts, getFilterValue, getVisibleContacts };\n","import React, { Component } from 'react';\nimport style from '../ModuleStyles/PhoneBook.module.css';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport InputMask from 'react-input-mask';\nimport { connect } from 'react-redux';\nimport taskOperation from '../redux/contactOperations';\nimport 'react-toastify/dist/ReactToastify.css';\nimport contactSelector from '../redux/contactsSelectors';\n\ntoast.configure();\n\nclass ContactForm extends Component {\n   state = { name: '', number: '' };\n   handleChange = (e) => {\n      this.setState({ name: e.target.value });\n   };\n   handleChangeNum = (e) => {\n      this.setState({ number: e.target.value });\n   };\n   notifiation = () => {\n      toast.error(`${this.state.name} is already in list!`, {\n         position: 'top-center',\n         autoClose: 2500,\n         hideProgressBar: false,\n         closeOnClick: true,\n         pauseOnHover: false,\n         draggable: true,\n         progress: undefined,\n      });\n   };\n   handleSubmit = (e) => {\n      e.preventDefault();\n      const contacts = this.props.contacts;\n      const { name } = this.state;\n      if (\n         contacts.find(\n            (contact) =>\n               contact.name.toLowerCase() === name.toLowerCase()\n         )\n      ) {\n         this.notifiation();\n      } else if (name.length === 0) {\n         return;\n      } else {\n         this.setState({ name: '', number: '' });\n         this.props.addContact(this.state.name, this.state.number);\n      }\n   };\n\n   render() {\n      const { name, number } = this.state;\n      return (\n         <form\n            className={style.submitForm}\n            onSubmit={this.handleSubmit}\n         >\n            <span className={style.details}>Name: </span>\n            <input\n               type=\"text\"\n               value={name}\n               onChange={this.handleChange}\n            ></input>\n            <br></br>\n            <span className={style.details}>Phone:</span>\n            <InputMask\n               mask=\"(999)-999-99-99\"\n               type=\"text\"\n               value={number}\n               onChange={this.handleChangeNum}\n            ></InputMask>\n\n            <br></br>\n            <button\n               className={style.addContactBtn}\n               onSubmit={this.handleSubmit}\n               type=\"submit\"\n            >\n               {name ? `Add ${name}` : 'Add Contact'}\n            </button>\n         </form>\n      );\n   }\n}\n\nconst mSTP = (state) => ({\n   contacts: contactSelector.getContacts(state),\n});\n\nconst mDPT = {\n   addContact: taskOperation.addContact,\n};\n\nexport default connect(mSTP, mDPT)(ContactForm);\n\nContactForm.propTypes = {\n   contacts: PropTypes.array,\n   addContact: PropTypes.func,\n};\n","import React from 'react';\nimport style from '../ModuleStyles/PhoneBook.module.css';\nimport PropTypes from 'prop-types';\nimport taskActions from '../redux/contactActions';\nimport { connect } from 'react-redux';\nimport contactSelector from '../redux/contactsSelectors';\n\nfunction Filter({ value, handleFilter }) {\n   return (\n      <form className={style.searchForm}>\n         <span className={style.formDescription}>\n            Find contacts by name\n         </span>\n         <input\n            className={style.searchInput}\n            onChange={(e) => handleFilter(e.target.value)}\n            value={value}\n            type=\"text\"\n         ></input>\n      </form>\n   );\n}\nconst mSTP = (state) => ({\n   value: contactSelector.getFilterValue(state),\n});\nconst mapDispatchToProps = {\n   handleFilter: taskActions.doFilter,\n};\n\nexport default connect(mSTP, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n   handleFilter: PropTypes.func,\n   filter: PropTypes.string,\n};\n","import React from 'react';\nimport style from '../ModuleStyles/PhoneBook.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n   CSSTransition,\n   TransitionGroup,\n} from 'react-transition-group';\nimport contactAction from '../redux/contactOperations';\nimport contactSelector from '../redux/contactsSelectors';\nfunction ContactList({ contacts, deleteContact }) {\n   return (\n      <TransitionGroup component=\"ul\">\n         {contacts.map(({ name, id, number }) => (\n            <CSSTransition key={id} timeout={300} classNames=\"items\">\n               <li key={id}>\n                  <span\n                     className={`${style.contactName} ${style.contactDetails}`}\n                  >\n                     {name + ':'}\n                  </span>\n                  <span\n                     className={`${style.contactPhone} ${style.contactDetails}`}\n                  >\n                     {number}\n                  </span>\n                  <button\n                     className={style.removeButton}\n                     type=\"button\"\n                     onClick={() => deleteContact(id)}\n                  >\n                     Delete\n                  </button>\n               </li>\n            </CSSTransition>\n         ))}\n      </TransitionGroup>\n   );\n}\nconst mapStateToProps = (state) => ({\n   contacts: contactSelector.getVisibleContacts(state),\n});\nconst mDTP = {\n   deleteContact: contactAction.removeContact,\n};\nexport default connect(mapStateToProps, mDTP)(ContactList);\n\nContactList.propTypes = {\n   name: PropTypes.string,\n   number: PropTypes.string,\n   id: PropTypes.string,\n   onRemove: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport ContactForm from './Components/ContactForm.jsx';\nimport Filter from './Components/Filter';\nimport ContactList from './Components/ContactsList.jsx';\nimport style from './ModuleStyles/PhoneBook.module.css';\nimport { CSSTransition } from 'react-transition-group';\nimport './ModuleStyles/animations.css';\nimport ParticlesBg from 'particles-bg';\nimport { connect } from 'react-redux';\nimport contactOperation from './redux/contactOperations';\nimport contactSelector from './redux/contactsSelectors';\nclass App extends Component {\n   componentDidMount() {\n      this.props.onFetchContacts();\n   }\n   render() {\n      const { contacts } = this.props;\n      return (\n         <div className={style.phonebook}>\n            <ParticlesBg type=\"circle\" bg={true}></ParticlesBg>\n            <CSSTransition\n               appear={true}\n               in={true}\n               timeout={2000}\n               unmountOnExit\n               classNames=\"logo\"\n            >\n               <h2>Phonebook</h2>\n            </CSSTransition>\n            <ContactForm />\n            <h2>Contacts</h2>\n            {contacts.length > 1 && <Filter />}\n\n            <ContactList />\n         </div>\n      );\n   }\n}\nconst mSTP = (state) => ({\n   contacts: contactSelector.getContacts(state),\n});\nconst mDTP = {\n   onFetchContacts: contactOperation.fetchContacts,\n};\n\nexport default connect(mSTP, mDTP)(App);\n","import { combineReducers } from 'redux';\nimport { toast } from 'react-toastify';\nimport { createReducer } from '@reduxjs/toolkit';\nimport contactAction from './contactActions';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure();\nconst notifiation = () => {\n   toast.info(`First, you have to enter the name!`, {\n      position: 'top-center',\n      autoClose: 2500,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: false,\n      draggable: true,\n      progress: undefined,\n   });\n};\n\nconst addContact = (state, action) => {\n   if (action.payload.name.length >= 1) {\n      return [...state, action.payload];\n   } else {\n      notifiation();\n   }\n};\nconst removeContact = (state, action) =>\n   state.filter((items) => items.id !== action.payload);\n\nconst items = createReducer([], {\n   [contactAction.fetchContactsSuccess]: (state, { payload }) =>\n      payload,\n   [contactAction.addContactSuccess]: addContact,\n   [contactAction.delContactsSuccess]: removeContact,\n});\n\nconst setFilter = (state, action) => action.payload.filter;\n\nconst filter = createReducer('', {\n   [contactAction.doFilter]: setFilter,\n});\n\nexport default combineReducers({\n   items,\n   filter,\n});\n","import contactsReducer from '../redux/contactsReducer';\nimport {\n   configureStore,\n   getDefaultMiddleware,\n} from '@reduxjs/toolkit';\n\nconst middlewareSettings = getDefaultMiddleware();\nconst store = configureStore({\n   reducer: { contacts: contactsReducer },\n   middleware: [...middlewareSettings],\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}